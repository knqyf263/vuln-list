{
  "ID": "oval:org.debian:def:20140060",
  "Class": "vulnerability",
  "Metadata": {
    "Title": "CVE-2014-0060",
    "AffectedList": [
      {
        "Family": "unix",
        "Platform": "Debian GNU/Linux 10",
        "Product": "postgresql-9.1"
      }
    ],
    "References": null,
    "Description": "several vulnerabilities",
    "Debian": {
      "MoreInfo": "\nDSA-2864\nVarious vulnerabilities were discovered in PostgreSQL:\nGranting a role without ADMIN OPTION is supposed to prevent the grantee\n   from adding or removing members from the granted role, but this\n   restriction was easily bypassed by doing SET ROLE first. The security\n   impact is mostly that a role member can revoke the access of others,\n   contrary to the wishes of his grantor. Unapproved role member additions\n   are a lesser concern, since an uncooperative role member could provide\n   most of his rights to others anyway by creating views or SECURITY\n   DEFINER functions.\nThe primary role of PL validator functions is to be called implicitly\n   during CREATE FUNCTION, but they are also normal SQL functions that a\n   user can call explicitly. Calling a validator on a function actually\n   written in some other language was not checked for and could be\n   exploited for privilege-escalation purposes. The fix involves adding a\n   call to a privilege-checking function in each validator function.\n   Non-core procedural languages will also need to make this change to\n   their own validator functions, if any.\nIf the name lookups come to different conclusions due to concurrent\n   activity, we might perform some parts of the DDL on a different table\n   than other parts. At least in the case of CREATE INDEX, this can be used\n   to cause the permissions checks to be performed against a different\n   table than the index creation, allowing for a privilege escalation\n   attack.\nThe MAXDATELEN constant was too small for the longest possible value of\n   type interval, allowing a buffer overrun in interval_out(). Although the\n   datetime input functions were more careful about avoiding buffer\n   overrun, the limit was short enough to cause them to reject some valid\n   inputs, such as input containing a very long timezone name. The ecpg\n   library contained these vulnerabilities along with some of its own.\nSeveral functions, mostly type input functions, calculated an allocation\n   size without checking for overflow. If overflow did occur, a too-small\n   buffer would be allocated and then written past.\nUse strlcpy() and related functions to provide a clear guarantee that\n   fixed-size buffers are not overrun. Unlike the preceding items, it is\n   unclear whether these cases really represent live issues, since in most\n   cases there appear to be previous constraints on the size of the input\n   string. Nonetheless it seems prudent to silence all Coverity warnings of\n   this type.\nThere are relatively few scenarios in which crypt() could return NULL,\n   but contrib/chkpass would crash if it did. One practical case in which\n   this could be an issue is if libc is configured to refuse to execute\n   unapproved hashing algorithms (e.g., \u003cq\u003eFIPS mode\u003c/q\u003e).\nSince the temporary server started by make check uses \u003cq\u003etrust\u003c/q\u003e\n   authentication, another user on the same machine could connect to it as\n   database superuser, and then potentially exploit the privileges of the\n   operating-system user who started the tests. A future release will\n   probably incorporate changes in the testing procedure to prevent this\n   risk, but some public discussion is needed first. So for the moment,\n   just warn people against using make check when there are untrusted users\n   on the same machine.\nDSA-2865\nVarious vulnerabilities were discovered in PostgreSQL:\nGranting a role without ADMIN OPTION is supposed to prevent the grantee\n   from adding or removing members from the granted role, but this\n   restriction was easily bypassed by doing SET ROLE first. The security\n   impact is mostly that a role member can revoke the access of others,\n   contrary to the wishes of his grantor. Unapproved role member additions\n   are a lesser concern, since an uncooperative role member could provide\n   most of his rights to others anyway by creating views or SECURITY\n   DEFINER functions.\nThe primary role of PL validator functions is to be called implicitly\n   during CREATE FUNCTION, but they are also normal SQL functions that a\n   user can call explicitly. Calling a validator on a function actually\n   written in some other language was not checked for and could be\n   exploited for privilege-escalation purposes. The fix involves adding a\n   call to a privilege-checking function in each validator function.\n   Non-core procedural languages will also need to make this change to\n   their own validator functions, if any.\nIf the name lookups come to different conclusions due to concurrent\n   activity, we might perform some parts of the DDL on a different table\n   than other parts. At least in the case of CREATE INDEX, this can be used\n   to cause the permissions checks to be performed against a different\n   table than the index creation, allowing for a privilege escalation\n   attack.\nThe MAXDATELEN constant was too small for the longest possible value of\n   type interval, allowing a buffer overrun in interval_out(). Although the\n   datetime input functions were more careful about avoiding buffer\n   overrun, the limit was short enough to cause them to reject some valid\n   inputs, such as input containing a very long timezone name. The ecpg\n   library contained these vulnerabilities along with some of its own.\nSeveral functions, mostly type input functions, calculated an allocation\n   size without checking for overflow. If overflow did occur, a too-small\n   buffer would be allocated and then written past.\nUse strlcpy() and related functions to provide a clear guarantee that\n   fixed-size buffers are not overrun. Unlike the preceding items, it is\n   unclear whether these cases really represent live issues, since in most\n   cases there appear to be previous constraints on the size of the input\n   string. Nonetheless it seems prudent to silence all Coverity warnings of\n   this type.\nThere are relatively few scenarios in which crypt() could return NULL,\n   but contrib/chkpass would crash if it did. One practical case in which\n   this could be an issue is if libc is configured to refuse to execute\n   unapproved hashing algorithms (e.g., \u003cq\u003eFIPS mode\u003c/q\u003e).\nSince the temporary server started by make check uses \u003cq\u003etrust\u003c/q\u003e\n   authentication, another user on the same machine could connect to it as\n   database superuser, and then potentially exploit the privileges of the\n   operating-system user who started the tests. A future release will\n   probably incorporate changes in the testing procedure to prevent this\n   risk, but some public discussion is needed first. So for the moment,\n   just warn people against using make check when there are untrusted users\n   on the same machine.\n"
    }
  },
  "Criteria": {
    "Operator": "AND",
    "Criterias": [
      {
        "Operator": "OR",
        "Criterias": [
          {
            "Operator": "AND",
            "Criterias": null,
            "Criterions": [
              {
                "Negate": false,
                "TestRef": "oval:org.debian.oval:tst:2",
                "Comment": "all architecture"
              },
              {
                "Negate": false,
                "TestRef": "oval:org.debian.oval:tst:7351",
                "Comment": "postgresql-9.1 DPKG is earlier than 9.3.3-1"
              }
            ]
          }
        ],
        "Criterions": null
      }
    ],
    "Criterions": [
      {
        "Negate": false,
        "TestRef": "oval:org.debian.oval:tst:1",
        "Comment": "Debian 10 is installed"
      }
    ]
  }
}